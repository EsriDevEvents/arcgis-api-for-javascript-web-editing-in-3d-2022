import{fG as a,g as p,n as o,ac as s,ad as g,ae as l}from"./vendor.1dc52be5.js";import{f as m}from"./LayerView2D.117f6ba5.js";import{i as n}from"./GraphicContainer.6ad8253a.js";import{r as d}from"./BaseGraphicContainer.875f1ac5.js";import"./Container.a479a20a.js";import"./EffectView.c4d390fc.js";import"./Utils.25ecb0e0.js";import"./enums.c01b5663.js";import"./number.dc47462b.js";import"./CIMSymbolHelper.e5777d0e.js";import"./BidiEngine.b9926823.js";import"./alignmentUtils.03ee467b.js";import"./definitions.52b5fae8.js";import"./GeometryUtils.e53da643.js";import"./normalizeUtilsSync.74de1b64.js";import"./FeatureContainer.183e9c44.js";import"./visualVariablesUtils.7fd15dde.js";import"./visualVariablesUtils.2f752113.js";import"./TileContainer.c6767449.js";import"./WGLContainer.5147bf48.js";import"./brushes.576aab26.js";import"./ProgramTemplate.baf6faf0.js";import"./StyleDefinition.57b891ae.js";import"./GeometryUtils.5ea26345.js";import"./MaterialKey.4c6f010e.js";import"./Matcher.28a7d10a.js";import"./tileUtils.85af3d89.js";import"./TileClipper.95bbf067.js";import"./Geometry.e891c191.js";import"./cimAnalyzer.13178822.js";import"./ExpandedCIM.b5e8a891.js";import"./schemaUtils.64b2d47a.js";import"./createSymbolSchema.d85b2a0c.js";import"./MD5.67d7a872.js";import"./util.2009583e.js";import"./ComputedAttributeStorage.96ac9ebb.js";import"./GraphicsView.eb98715d.js";const c={remove(){},pause(){},resume(){}};let r=class extends m(a){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new d({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new n(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){var t;let e;return typeof i=="number"?e=[i]:i instanceof p?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):o.isCollection(i)&&i.length>0&&(e=i.map(h=>h&&h.uid).toArray()),e=(t=e)==null?void 0:t.filter(h=>h!=null),e.length?(this._addHighlight(e),{remove:()=>this._removeHighlight(e)}):c}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([g()],r.prototype,"graphicsView",void 0),r=s([l("esri.views.2d.layers.GraphicsLayerView2D")],r);const Y=r;export{Y as default};
