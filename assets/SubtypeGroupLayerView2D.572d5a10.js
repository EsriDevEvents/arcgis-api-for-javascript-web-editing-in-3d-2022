var m=Object.defineProperty,u=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable;var p=(r,e,i)=>e in r?m(r,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):r[e]=i,o=(r,e)=>{for(var i in e||(e={}))h.call(e,i)&&p(r,i,e[i]);if(n)for(var i of n(e))b.call(e,i)&&p(r,i,e[i]);return r},y=(r,e)=>u(r,d(e));import{ac as c,ae as f,cR as w,a8 as g,kw as x}from"./vendor.1dc52be5.js";import S from"./FeatureLayerView2D.239791b0.js";import"./EffectView.c4d390fc.js";import"./definitions.52b5fae8.js";import"./LayerView2D.117f6ba5.js";import"./Container.a479a20a.js";import"./schemaUtils.64b2d47a.js";import"./Utils.25ecb0e0.js";import"./enums.c01b5663.js";import"./number.dc47462b.js";import"./visualVariablesUtils.2f752113.js";import"./createSymbolSchema.d85b2a0c.js";import"./MaterialKey.4c6f010e.js";import"./alignmentUtils.03ee467b.js";import"./CIMSymbolHelper.e5777d0e.js";import"./BidiEngine.b9926823.js";import"./GeometryUtils.e53da643.js";import"./cimAnalyzer.13178822.js";import"./ExpandedCIM.b5e8a891.js";import"./MD5.67d7a872.js";import"./util.2009583e.js";import"./FeatureLayerView.70ac15e3.js";import"./popupUtils.b61067f9.js";import"./RefreshableLayerView.3b33c0ca.js";function v(r,e){return!r.visible||r.minScale!==0&&e>r.minScale||r.maxScale!==0&&e<r.maxScale}let l=class extends S{initialize(){this.handles.add([w(this.view,"viewpoint",()=>this._update())])}_injectOverrides(r){let e=super._injectOverrides(r);const i=this.view.scale,s=this.layer.sublayers.filter(a=>v(a,i)).map(a=>a.subtypeCode);if(!s.length)return e;e=g(e)?e:new x().toJSON();const t=`NOT ${this.layer.subtypeField} IN (${s.join(",")})`;return e.where=e.where?`(${e.where}) AND (${t})`:t,e}_setLayersForFeature(r){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),i=r.attributes[e.name],s=this.layer.sublayers.find(t=>t.subtypeCode===i);r.layer=s,r.sourceLayer=this.layer}_createSchemaConfig(){const r={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(t=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:t.labelingInfo,labelsVisible:t.labelsVisible,renderer:t.renderer,subtypeCode:t.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(t=>t.subtypeCode).join(","),i=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let s=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return s+=i,y(o(o({},super._createSchemaConfig()),r),{definitionExpression:s})}};l=c([f("esri.views.2d.layers.SubtypeGroupLayerView2D")],l);const Q=l;export{Q as default};
