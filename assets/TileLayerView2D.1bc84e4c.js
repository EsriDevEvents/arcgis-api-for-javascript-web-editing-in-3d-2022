var V=Object.defineProperty,T=Object.defineProperties;var q=Object.getOwnPropertyDescriptors;var f=Object.getOwnPropertySymbols;var Q=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var m=(e,t,i)=>t in e?V(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,d=(e,t)=>{for(var i in t||(t={}))Q.call(t,i)&&m(e,i,t[i]);if(f)for(var i of f(t))S.call(t,i)&&m(e,i,t[i]);return e},_=(e,t)=>T(e,q(t));import{fG as U,qr as b,u2 as C,u3 as k,c as R,iR as z,k8 as F,fJ as n,no as y,aM as x,ac as o,ad as g,ae as E}from"./vendor.1dc52be5.js";import{r as L,o as w,n as I}from"./imageUtils.e6673a1c.js";import{f as P}from"./LayerView2D.117f6ba5.js";import{i as A}from"./RefreshableLayerView.3b33c0ca.js";import{i as G}from"./TileLayerView.d6b2e5e7.js";import"./BitmapTileContainer.b4d40606.js";import"./Bitmap.2f97ffc8.js";import"./brushes.576aab26.js";import"./definitions.52b5fae8.js";import"./Utils.25ecb0e0.js";import"./enums.c01b5663.js";import"./number.dc47462b.js";import"./ProgramTemplate.baf6faf0.js";import"./StyleDefinition.57b891ae.js";import"./GeometryUtils.5ea26345.js";import"./MaterialKey.4c6f010e.js";import"./alignmentUtils.03ee467b.js";import"./TileContainer.c6767449.js";import"./WGLContainer.5147bf48.js";import"./Container.a479a20a.js";import"./EffectView.c4d390fc.js";const D=[0,0];let r=class extends G(A(L(P(U)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new b(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new C({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new k({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(R(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return z((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return F(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>this._enqueueTileFetch(e)))}isUpdating(){var e,t;return(e=(t=this._fetchQueue)==null?void 0:t.updating)!=null&&e}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(D,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:a,resamplingLevel:u=0}=t;if(!i)try{return await this._fetchImage(e,a)}catch(s){if(!n(s)&&!this.resampling)return w(this._tileInfoView.tileInfo.size);if(u<3){const c=this._tileInfoView.getTileParentId(e.id);if(c){const p=new y(c),v=await this.fetchTile(p,_(d({},t),{resamplingLevel:u+1}));return I(this._tileInfoView,v,p,e)}}throw s}const l=new y(0,0,0,0);let h;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:a}),l.level!==e.level&&!this.resampling)return w(this._tileInfoView.tileInfo.size);h=await this._fetchImage(l,a)}catch(s){if(n(s))throw s;h=await this._fetchImage(e,a)}return this.resampling?I(this._tileInfoView,h,l,e):h}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||x.getLogger(this.declaredClass).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}};o([g()],r.prototype,"_fetchQueue",void 0),o([g()],r.prototype,"resampling",null),r=o([E("esri.views.2d.layers.TileLayerView2D")],r);const oe=r;export{oe as default};
